/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coursework;

/**
 *
 * @author tenzing
 */
import javax.swing.table.*;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Logger;
import java.util.logging.Level;
import java.io.FileNotFoundException;
import java.util.ArrayList;

public class CollegeInfo extends javax.swing.JFrame {

    /**
     * Creates new form roomfinder
     */
    public CollegeInfo() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        lblImage = new javax.swing.JLabel();
        lblPropertyName = new javax.swing.JLabel();
        txtLocation = new javax.swing.JTextField();
        lblPropertyType = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblLocation = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtPropertyName = new javax.swing.JTextField();
        txtPropertyType = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        lblTitle = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        lblRating = new javax.swing.JLabel();
        txtRating = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRooms = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnTypeSearch = new javax.swing.JButton();
        radKathmandu = new javax.swing.JRadioButton();
        radBhaktapur = new javax.swing.JRadioButton();
        radPokhara = new javax.swing.JRadioButton();
        lblPropertyType2 = new javax.swing.JLabel();
        lblRating2 = new javax.swing.JLabel();
        lblPrice2 = new javax.swing.JLabel();
        txtRating2 = new javax.swing.JTextField();
        txtPrice2 = new javax.swing.JTextField();
        btnPriceSearch = new javax.swing.JButton();
        btnMainSearch = new javax.swing.JButton();
        cmbPropertyType = new javax.swing.JComboBox<>();
        btnRatingsSort = new javax.swing.JButton();
        btnPriceSort = new javax.swing.JButton();
        mbrMenuBar = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniOpen = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuHelp = new javax.swing.JMenu();
        mniUserManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(52, 159, 134));
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(52, 159, 134));

        jPanel4.setBackground(new java.awt.Color(96, 234, 199));

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/coursework/images/logo.jpg"))); // NOI18N

        lblPropertyName.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
        lblPropertyName.setForeground(new java.awt.Color(67, 135, 119));
        lblPropertyName.setText("Property Name");

        txtLocation.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txtLocation.setForeground(new java.awt.Color(67, 135, 119));

        lblPropertyType.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
        lblPropertyType.setForeground(new java.awt.Color(67, 135, 119));
        lblPropertyType.setText("Property Type");

        lblPrice.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(67, 135, 119));
        lblPrice.setText("Price");

        lblLocation.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
        lblLocation.setForeground(new java.awt.Color(67, 135, 119));
        lblLocation.setText("Location");

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnClear.setForeground(new java.awt.Color(13, 190, 143));
        btnClear.setBorder(null);
        btnClear.setBorderPainted(false);
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setLabel("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(242, 99, 95));
        btnDelete.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setBorder(null);
        btnDelete.setBorderPainted(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtPropertyName.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txtPropertyName.setForeground(new java.awt.Color(67, 135, 119));
        txtPropertyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPropertyNameActionPerformed(evt);
            }
        });

        txtPropertyType.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txtPropertyType.setForeground(new java.awt.Color(67, 135, 119));

        txtPrice.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txtPrice.setForeground(new java.awt.Color(67, 135, 119));

        lblTitle.setFont(new java.awt.Font("Microsoft Tai Le", 1, 30)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Room Finding Management System");

        btnAdd.setBackground(new java.awt.Color(13, 190, 143));
        btnAdd.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setBorder(null);
        btnAdd.setBorderPainted(false);
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        lblRating.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
        lblRating.setForeground(new java.awt.Color(67, 135, 119));
        lblRating.setText("Rating");

        txtRating.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        txtRating.setForeground(new java.awt.Color(67, 135, 119));
        txtRating.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRatingActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(51, 163, 236));
        btnUpdate.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.setBorder(null);
        btnUpdate.setBorderPainted(false);
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lblRating, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPropertyName)
                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblLocation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPropertyType, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(67, 67, 67)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(73, 73, 73)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPropertyName, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(75, 75, 75))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(lblTitle))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPropertyName)
                    .addComponent(txtPropertyName, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPropertyType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLocation)
                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPrice)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRating)
                    .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblRooms.getTableHeader().setFont(new java.awt.Font("Microsoft Tai Le", 0, 18));
        tblRooms.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        tblRooms.setForeground(new java.awt.Color(67, 135, 119));
        tblRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Property Name", "Property Type", "Location", "Price", "Rating"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;
            }

        }
    );
    tblRooms.setRowHeight(25);
    tblRooms.getTableHeader().setResizingAllowed(false);
    tblRooms.getTableHeader().setReorderingAllowed(false);
    tblRooms.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            tblRoomsMouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(tblRooms);

    jPanel1.setBackground(new java.awt.Color(207, 239, 222));

    jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jComboBox1.setForeground(new java.awt.Color(13, 190, 143));
    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

    jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jComboBox2.setForeground(new java.awt.Color(13, 190, 143));
    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

    jComboBox3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
    jComboBox3.setForeground(new java.awt.Color(13, 190, 143));
    jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6" }));

    jLabel7.setBackground(new java.awt.Color(255, 255, 255));
    jLabel7.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(13, 190, 143));
    jLabel7.setText("Rooms");

    jLabel8.setBackground(new java.awt.Color(255, 255, 255));
    jLabel8.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    jLabel8.setForeground(new java.awt.Color(13, 190, 143));
    jLabel8.setText("Adults");

    jLabel9.setBackground(new java.awt.Color(255, 255, 255));
    jLabel9.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    jLabel9.setForeground(new java.awt.Color(13, 190, 143));
    jLabel9.setText("Children");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(46, 46, 46)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel7)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(77, 77, 77)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel8)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(75, 75, 75)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel9)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(48, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(jLabel8)
                .addComponent(jLabel9))
            .addGap(6, 6, 6)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(23, 23, 23))
    );

    btnTypeSearch.setBackground(new java.awt.Color(255, 255, 255));
    btnTypeSearch.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    btnTypeSearch.setForeground(new java.awt.Color(13, 190, 143));
    btnTypeSearch.setText("Search by type");
    btnTypeSearch.setBorder(null);
    btnTypeSearch.setBorderPainted(false);
    btnTypeSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnTypeSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnTypeSearchActionPerformed(evt);
        }
    });

    radKathmandu.setBackground(new java.awt.Color(255, 255, 255));
    buttonGroup1.add(radKathmandu);
    radKathmandu.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    radKathmandu.setForeground(new java.awt.Color(255, 255, 255));
    radKathmandu.setText("Kathmandu");
    radKathmandu.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radKathmanduActionPerformed(evt);
        }
    });

    radBhaktapur.setBackground(new java.awt.Color(255, 255, 255));
    buttonGroup1.add(radBhaktapur);
    radBhaktapur.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    radBhaktapur.setForeground(new java.awt.Color(255, 255, 255));
    radBhaktapur.setText("Bhaktapur");
    radBhaktapur.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radBhaktapurActionPerformed(evt);
        }
    });

    radPokhara.setBackground(new java.awt.Color(255, 255, 255));
    buttonGroup1.add(radPokhara);
    radPokhara.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    radPokhara.setForeground(new java.awt.Color(255, 255, 255));
    radPokhara.setText("Pokhara");
    radPokhara.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            radPokharaActionPerformed(evt);
        }
    });

    lblPropertyType2.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
    lblPropertyType2.setForeground(new java.awt.Color(255, 255, 255));
    lblPropertyType2.setText("Property Type");

    lblRating2.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
    lblRating2.setForeground(new java.awt.Color(255, 255, 255));
    lblRating2.setText("Ratings");

    lblPrice2.setFont(new java.awt.Font("Microsoft Tai Le", 1, 24)); // NOI18N
    lblPrice2.setForeground(new java.awt.Color(255, 255, 255));
    lblPrice2.setText("Price");

    txtRating2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    txtRating2.setForeground(new java.awt.Color(67, 135, 119));

    txtPrice2.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    txtPrice2.setForeground(new java.awt.Color(67, 135, 119));
    txtPrice2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            txtPrice2ActionPerformed(evt);
        }
    });

    btnPriceSearch.setBackground(new java.awt.Color(255, 255, 255));
    btnPriceSearch.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    btnPriceSearch.setForeground(new java.awt.Color(13, 190, 143));
    btnPriceSearch.setText("Search by price");
    btnPriceSearch.setBorder(null);
    btnPriceSearch.setBorderPainted(false);
    btnPriceSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnPriceSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPriceSearchActionPerformed(evt);
        }
    });

    btnMainSearch.setBackground(new java.awt.Color(13, 190, 143));
    btnMainSearch.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    btnMainSearch.setForeground(new java.awt.Color(255, 255, 255));
    btnMainSearch.setText("Search");
    btnMainSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    btnMainSearch.setBorderPainted(false);
    btnMainSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    btnMainSearch.setFocusPainted(false);
    btnMainSearch.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
    btnMainSearch.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnMainSearchActionPerformed(evt);
        }
    });

    cmbPropertyType.setFont(new java.awt.Font("Microsoft Tai Le", 1, 18)); // NOI18N
    cmbPropertyType.setForeground(new java.awt.Color(67, 135, 119));
    cmbPropertyType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hotel", "Apartment", "Villa", "Resort", "Cottage" }));
    cmbPropertyType.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cmbPropertyTypeActionPerformed(evt);
        }
    });

    btnRatingsSort.setBackground(new java.awt.Color(255, 255, 255));
    btnRatingsSort.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    btnRatingsSort.setForeground(new java.awt.Color(13, 190, 143));
    btnRatingsSort.setText("Sort by ratings");
    btnRatingsSort.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnRatingsSortActionPerformed(evt);
        }
    });

    btnPriceSort.setBackground(new java.awt.Color(255, 255, 255));
    btnPriceSort.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
    btnPriceSort.setForeground(new java.awt.Color(13, 190, 143));
    btnPriceSort.setText("Sort by price");
    btnPriceSort.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnPriceSortActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(177, 177, 177)
                            .addComponent(btnPriceSort, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(118, 118, 118)
                            .addComponent(btnRatingsSort, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(97, 97, 97)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(radKathmandu)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(lblRating2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtRating2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(lblPrice2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPrice2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(lblPropertyType2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                    .addComponent(cmbPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(32, 32, 32)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(radPokhara, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnTypeSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPriceSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(157, 157, 157))
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(212, 212, 212)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(370, 370, 370)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(radBhaktapur)
                                .addComponent(btnMainSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addGap(35, 35, 35)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(28, 28, 28)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(btnMainSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(radBhaktapur)
                .addComponent(radPokhara)
                .addComponent(radKathmandu))
            .addGap(35, 35, 35)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(lblPropertyType2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPropertyType, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTypeSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnPriceSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(txtPrice2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblPrice2))
            .addGap(20, 20, 20)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(txtRating2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lblRating2))
            .addGap(18, 18, 18)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnRatingsSort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnPriceSort, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    mnuFile.setText("File");

    mniOpen.setText("Open");
    mniOpen.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mniOpenActionPerformed(evt);
        }
    });
    mnuFile.add(mniOpen);

    mniExit.setText("Exit");
    mniExit.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mniExitActionPerformed(evt);
        }
    });
    mnuFile.add(mniExit);

    mbrMenuBar.add(mnuFile);

    mnuHelp.setText("Help");
    mnuHelp.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mnuHelpActionPerformed(evt);
        }
    });

    mniUserManual.setText("User Manual");
    mniUserManual.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            mniUserManualActionPerformed(evt);
        }
    });
    mnuHelp.add(mniUserManual);

    mbrMenuBar.add(mnuHelp);

    setJMenuBar(mbrMenuBar);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radKathmanduActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radKathmanduActionPerformed
        searchValues[1] = "Kathmandu";
    }//GEN-LAST:event_radKathmanduActionPerformed

    private void txtRatingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRatingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRatingActionPerformed

    private void txtPropertyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPropertyNameActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtPropertyNameActionPerformed
    String[] values = {"Property Name", "type", "location", "price", "ratings"};

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        //setting array elements
        values[0] = getPropertyName();
        values[1] = getPropertyType();
        values[2] = getPropertyLocation();
        values[3] = getPrice();
        values[4] = getRating();
        

            if(!values[0].isEmpty() && !values[1].isEmpty() && !values[2].isEmpty() && !values[3].isEmpty() && !values[4].isEmpty()){
                
                try{
                //converting string to integer
                Integer.parseInt(values[3]);
                Integer.parseInt(values[4]);
                DefaultTableModel model = (DefaultTableModel) tblRooms.getModel();
                model.addRow(values);
                btnClearActionPerformed(evt);
                
                }
                
                catch(NumberFormatException e){
                    JOptionPane.showMessageDialog(this,"Value must be an integer");
                    
                }

            }
            else{
                JOptionPane.showMessageDialog(this, "Please fill all the fields");
            }
            

                    


    }//GEN-LAST:event_btnAddActionPerformed


    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtPropertyName.setText("");
        txtPropertyType.setText("");
        txtLocation.setText("");
        txtPrice.setText("");
        txtRating.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

    private void tblRoomsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomsMouseClicked
        // TODO add your handling code here:
        //getting the table model
        DefaultTableModel tblModel = (DefaultTableModel) tblRooms.getModel();

        //extracting value from the table
        String tblPropertyName = tblModel.getValueAt(tblRooms.getSelectedRow(), 0).toString();
        String tblPropertyType = tblModel.getValueAt(tblRooms.getSelectedRow(), 1).toString();
        String tblLocation = tblModel.getValueAt(tblRooms.getSelectedRow(), 2).toString();
        String tblPrice = tblModel.getValueAt(tblRooms.getSelectedRow(), 3).toString();
        String tblRating = tblModel.getValueAt(tblRooms.getSelectedRow(), 4).toString();

        //setting the data to their respective JTextFields
        txtPropertyName.setText(tblPropertyName);
        txtPropertyType.setText(tblPropertyType);
        txtLocation.setText(tblLocation);
        txtPrice.setText(tblPrice);
        txtRating.setText(tblRating);


    }//GEN-LAST:event_tblRoomsMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        //getting the table model
        DefaultTableModel tblModel = (DefaultTableModel) tblRooms.getModel();

        if (tblRooms.getSelectedRowCount() == 1) {

            //if single row is selected than update
            String propertyName = txtPropertyName.getText();
            String propertyType = txtPropertyType.getText();
            String location = txtLocation.getText();
            String price = txtPrice.getText();
            String rating = txtRating.getText();

            //set updated value on table row
            tblModel.setValueAt(propertyName, tblRooms.getSelectedRow(), 0);
            tblModel.setValueAt(propertyType, tblRooms.getSelectedRow(), 1);
            tblModel.setValueAt(location, tblRooms.getSelectedRow(), 2);
            tblModel.setValueAt(price, tblRooms.getSelectedRow(), 3);
            tblModel.setValueAt(rating, tblRooms.getSelectedRow(), 4);

            //update message display
            JOptionPane.showMessageDialog(this, "Update Successfully...");
            btnClearActionPerformed(evt);

        } else {
            if (tblRooms.getRowCount() == 0) {
                //if table is empty
                JOptionPane.showMessageDialog(this, "Table is Empty...");
            } else {
                //if row is not selected or multiple ro wis selected
                JOptionPane.showMessageDialog(this, "Please select a row");
            }
        }


    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //getting table model

        DefaultTableModel tblModel = (DefaultTableModel) tblRooms.getModel();

        //delete row
        if (tblRooms.getSelectedRowCount() == 1) {
            //if single row is selected than delete
            tblModel.removeRow(tblRooms.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Succesfully Deleted!");
            btnClearActionPerformed(evt);
        } else {
            if (tblRooms.getRowCount() == 0) {
                //if table is empty than display this message
                JOptionPane.showMessageDialog(this, "Table is empty");

            } else {
                JOptionPane.showMessageDialog(this, "Please select a row");
            }
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void mniOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniOpenActionPerformed
        // TODO add your handling code here:

        String filePath = "table.txt";
        File file = new File(filePath);

        try {
            //A filereader that  creates an input character stream and reads characters from it
            FileReader fr = new FileReader(file);
            
            //Creating BufferedReader object 
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel) tblRooms.getModel();
            model.setRowCount(0);
            Object[] lines = br.lines().toArray();
            
            for (int i = 0; i < lines.length; i++) {
                String[] row = lines[i].toString().split(" ");
                model.addRow(row);
            }

        } catch (FileNotFoundException ex) {
             JOptionPane.showMessageDialog(this, "File not found!");
        }

    }//GEN-LAST:event_mniOpenActionPerformed

    private void btnPriceSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceSearchActionPerformed
        // TODO add your handling code here:

        //sorting the table
        // selection sorting
        try {
            ArrayList<String> aPropertyName = new ArrayList();
            ArrayList<String> aPropertyType = new ArrayList();
            ArrayList<String> aLocation = new ArrayList();
            ArrayList<Integer> aPrice = new ArrayList();
            ArrayList<Integer> aRating = new ArrayList();

            int rowCount = tblRooms.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                String mPropertyName = (String) tblRooms.getValueAt(i, 0);
                String mPropertyType = (String) tblRooms.getValueAt(i, 1);
                String mLocation = (String) tblRooms.getValueAt(i, 2);
                String mPrice = (String) tblRooms.getValueAt(i, 3);
                String mRating = (String) tblRooms.getValueAt(i, 4);
                if (!mPropertyName.isEmpty() && !mPropertyType.isEmpty() && !mLocation.isEmpty() && !mPrice.isEmpty() && !mRating.isEmpty()) {
                    aPropertyName.add(mPropertyName);
                    aPropertyType.add(mPropertyType);
                    aLocation.add(mLocation);
                    aPrice.add(Integer.parseInt(mPrice));
                    aRating.add(Integer.parseInt(mRating));
                }
            }

            for (int i = 0; i < aPrice.size(); i++) {
                int min = i;
                for (int j = i + 1; j < aPrice.size(); j++) {
                    if (aPrice.get(j) < aPrice.get(min)) {
                        min = j;
                    }
            }

                // swapping array list values
                int priceTemp = aPrice.get(min);
                aPrice.set(min, aPrice.get(i));
                aPrice.set(i, priceTemp);

                int ratingTemp = aRating.get(min);
                aRating.set(min, aRating.get(i));
                aRating.set(i, ratingTemp);

                String propertyNameTemp = aPropertyName.get(min);
                aPropertyName.set(min, aPropertyName.get(i));
                aPropertyName.set(i, propertyNameTemp);

                String propertyTypeTemp = aPropertyType.get(min);
                aPropertyType.set(min, aPropertyType.get(i));
                aPropertyType.set(i, propertyTypeTemp);

                String locationTemp = aLocation.get(min);
                aLocation.set(min, aLocation.get(i));
                aLocation.set(i, locationTemp);

            }
            // binary search
            int val = Integer.parseInt(txtPrice2.getText());
            int low = 0;
            int high = aPrice.size();
            int output = binSearch(aPrice, low, high, val);

            if (output == -1) {
                JOptionPane.showMessageDialog(this, "Property not found");
            } else {
                int getPrice = aPrice.get(output);
                String getPropertyName = aPropertyName.get(output);
                String getPropertyType = aPropertyType.get(output);
                String getLocation = aLocation.get(output);
                int getRating = aRating.get(output);

                JOptionPane.showMessageDialog(this, "Available Property:" + "\n" + getPropertyName + " | " + getPropertyType + " | " + getLocation + " | " + getPrice + " | " + getRating);

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please enter a valid price");
        }

    }//GEN-LAST:event_btnPriceSearchActionPerformed
    public int binSearch(ArrayList<Integer> a, int low, int high, int val) {
        int mid = (low + high) / 2;
        if (low > high) {
            return -1;
        }
        if (a.get(mid) == val) {
            return mid;
        } 
        else if (val < a.get(mid)) {
            return binSearch(a, low, mid - 1, val);
        } 
        else {
            return binSearch(a, mid + 1, high, val);
        }
    }

    private void txtPrice2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrice2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrice2ActionPerformed

    private void btnTypeSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTypeSearchActionPerformed
        // TODO add your handling code here:
        //creating new array lists
        ArrayList<String> aPropertyName = new ArrayList();
        ArrayList<String> aPropertyType = new ArrayList();
        ArrayList<String> aLocation = new ArrayList();
        ArrayList<Integer> aPrice = new ArrayList();
        ArrayList<Integer> aRating = new ArrayList();

        int rowCount = tblRooms.getRowCount();
        System.out.println(rowCount);
        for (int i = 0; i < rowCount; i++) {
            String mPropertyName = (String) tblRooms.getValueAt(i, 0);
            String mPropertyType = (String) tblRooms.getValueAt(i, 1);
            String mLocation = (String) tblRooms.getValueAt(i, 2);
            String mPrice = (String) tblRooms.getValueAt(i, 3);
            String mRating = (String) tblRooms.getValueAt(i, 4);
            if (!mPropertyName.isEmpty() && !mPropertyType.isEmpty() && !mLocation.isEmpty() && !mPrice.isEmpty() && !mRating.isEmpty()) {
                aPropertyName.add(mPropertyName);
                aPropertyType.add(mPropertyType);
                aLocation.add(mLocation);
                aPrice.add(Integer.parseInt(mPrice));
                aRating.add(Integer.parseInt(mRating));
            }

        }
        String val = cmbPropertyType.getSelectedItem().toString();
        ArrayList<Integer> index = linearSearch(aPropertyType, val);
        String result = "";
        for (int i : index) {

            result += aPropertyName.get(i) + " | " + aPropertyType.get(i) + " | " + aLocation.get(i) + " | " + aPrice.get(i) + " | " + aRating.get(i) + "\n";
        }
        JOptionPane.showMessageDialog(this, "Available property:" + index.size() + "\n" + result);
    }//GEN-LAST:event_btnTypeSearchActionPerformed

    private void btnPriceSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPriceSortActionPerformed
        // TODO add your handling code here:
        try {
            //Creating new arraylists
            ArrayList<String> aPropertyName = new ArrayList();
            ArrayList<String> aPropertyType = new ArrayList();
            ArrayList<String> aLocation = new ArrayList();
            ArrayList<Integer> aPrice = new ArrayList();
            ArrayList<Integer> aRating = new ArrayList();

            int rowCount = tblRooms.getRowCount();
            
            if(rowCount==0){
                JOptionPane.showMessageDialog(this, "No table found!");
            }
            for (int i = 0; i < rowCount; i++) {
                String mPropertyName = (String) tblRooms.getValueAt(i, 0);
                String mPropertyType = (String) tblRooms.getValueAt(i, 1);
                String mLocation = (String) tblRooms.getValueAt(i, 2);
                String mPrice = (String) tblRooms.getValueAt(i, 3);
                String mRating = (String) tblRooms.getValueAt(i, 4);
                if (mPropertyName != null && mPropertyType != null && mLocation != null && mPrice != null && mRating != null) {
                    aPropertyName.add(mPropertyName);
                    aPropertyType.add(mPropertyType);
                    aLocation.add(mLocation);
                    aPrice.add(Integer.parseInt(mPrice));
                    aRating.add(Integer.parseInt(mRating));
                }
            }
            
            for (int i = 0; i < aPrice.size(); i++) {
                int min = i;
                for (int j = i + 1; j < aPrice.size(); j++) {
                    if (aPrice.get(j) < aPrice.get(min)) {
                        min = j;
                    }
                }

                // swapping array values
                int priceTemp = aPrice.get(min);
                aPrice.set(min, aPrice.get(i));
                aPrice.set(i, priceTemp);

                int ratingTemp = aRating.get(min);
                aRating.set(min, aRating.get(i));
                aRating.set(i, ratingTemp);

                String propertyNameTemp = aPropertyName.get(min);
                aPropertyName.set(min, aPropertyName.get(i));
                aPropertyName.set(i, propertyNameTemp);

                String propertyTypeTemp = aPropertyType.get(min);
                aPropertyType.set(min, aPropertyType.get(i));
                aPropertyType.set(i, propertyTypeTemp);

                String locationTemp = aLocation.get(min);
                aLocation.set(min, aLocation.get(i));
                aLocation.set(i, locationTemp);

                tblSwap(i, min);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please enter a record");
        }

    }//GEN-LAST:event_btnPriceSortActionPerformed

    private void btnRatingsSortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRatingsSortActionPerformed
        // TODO add your handling code here:
        try {
            //Creating new array lists
            ArrayList<String> aPropertyName = new ArrayList();
            ArrayList<String> aPropertyType = new ArrayList();
            ArrayList<String> aLocation = new ArrayList();
            ArrayList<Integer> aPrice = new ArrayList();
            ArrayList<Integer> aRating = new ArrayList();
            int rowCount = tblRooms.getRowCount();
            if(rowCount==0){
                JOptionPane.showMessageDialog(this, "No table found!");
            }
            for (int i = 0; i < rowCount; i++) {
                String mPropertyName = (String) tblRooms.getValueAt(i, 0);
                String mPropertyType = (String) tblRooms.getValueAt(i, 1);
                String mLocation = (String) tblRooms.getValueAt(i, 2);
                String mPrice = (String) tblRooms.getValueAt(i, 3);
                String mRating = (String) tblRooms.getValueAt(i, 4);
                if (mPropertyName != null && mPropertyType != null && mLocation != null && mPrice != null && mRating != null) {
                    aPropertyName.add(mPropertyName);
                    aPropertyType.add(mPropertyType);
                    aLocation.add(mLocation);
                    aPrice.add(Integer.parseInt(mPrice));
                    aRating.add(Integer.parseInt(mRating));
                }
            }
            for (int i = 0; i < aRating.size(); i++) {
                int min = i;
                for (int j = i + 1; j < aRating.size(); j++) {
                    // for the string data we need to use: a[k].compareTo( a[min] ) > 0  
                    if (aRating.get(j) < aRating.get(min)) {
                        min = j;
                    }
                }
                // swapping array values
                int priceTemp = aPrice.get(min);
                aPrice.set(min, aPrice.get(i));
                aPrice.set(i, priceTemp);

                int ratingTemp = aRating.get(min);
                aRating.set(min, aRating.get(i));
                aRating.set(i, ratingTemp);

                String propertyNameTemp = aPropertyName.get(min);
                aPropertyName.set(min, aPropertyName.get(i));
                aPropertyName.set(i, propertyNameTemp);

                String propertyTypeTemp = aPropertyType.get(min);
                aPropertyType.set(min, aPropertyType.get(i));
                aPropertyType.set(i, propertyTypeTemp);

                String locationTemp = aLocation.get(min);
                aLocation.set(min, aLocation.get(i));
                aLocation.set(i, locationTemp);

                tblSwap(i, min);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Please enter a record");
        }
    }//GEN-LAST:event_btnRatingsSortActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_mniExitActionPerformed

    private void mnuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuHelpActionPerformed
        // TODO add your handling code here:


    }//GEN-LAST:event_mnuHelpActionPerformed

    private void mniUserManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUserManualActionPerformed
        // TODO add your handling code here:
        try {
            
            Runtime.getRuntime().exec("rundll32 url.dll, FileProtocolHandler " + "manual.pdf");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Check file details");
        }
    }//GEN-LAST:event_mniUserManualActionPerformed
    String[] searchValues = {"propertyType", "location", "price", "rating"};

    private void btnMainSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMainSearchActionPerformed
        // TODO add your handling code here:
        //creating new arraylist
        ArrayList<String> aPropertyName = new ArrayList();
        ArrayList<String> aPropertyType = new ArrayList();
        ArrayList<String> aLocation = new ArrayList();
        ArrayList<Integer> aPrice = new ArrayList();
        ArrayList<Integer> aRating = new ArrayList();
        int rowCount = tblRooms.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String mPropertyName = (String) tblRooms.getValueAt(i, 0);
            String mPropertyType = (String) tblRooms.getValueAt(i, 1);
            String mLocation = (String) tblRooms.getValueAt(i, 2);
            String mPrice = (String) tblRooms.getValueAt(i, 3);
            String mRating = (String) tblRooms.getValueAt(i, 4);
            if (!mPropertyName.isEmpty() && !mPropertyType.isEmpty() && !mLocation.isEmpty() && !mPrice.isEmpty() && !mRating.isEmpty()) {
                aPropertyName.add(mPropertyName);
                aPropertyType.add(mPropertyType);
                aLocation.add(mLocation);
                aPrice.add(Integer.parseInt(mPrice));
                aRating.add(Integer.parseInt(mRating));
            }
        }
        
        searchValues[0] = cmbPropertyType.getSelectedItem().toString();
        searchValues[2] = txtPrice2.getText();
        searchValues[3] = txtRating2.getText();
        String result = "";
        if (!searchValues[0].isEmpty() && !searchValues[1].isEmpty() && !searchValues[2].isEmpty() && !searchValues[3].isEmpty()){
            
            for(int i = 0; i< aPropertyName.size(); i++){
                System.out.println("searchValues: " + searchValues[0] + searchValues[1] + searchValues[2]+ searchValues[3]);
                System.out.println("array: " + aPropertyType.get(i) + aLocation.get(i) + aPrice.get(i) +  aRating.get(i));
                if(aPropertyType.get(i).contains(searchValues[0]) && aLocation.get(i).contains(searchValues[1]) && aPrice.get(i) == Integer.parseInt(searchValues[2]) && aRating.get(i) == Integer.parseInt(searchValues[3]))
                {
                    
                    result = "Property Found" + "\n" + aPropertyName.get(i) + "|" +  aPropertyType.get(i) + "|"+  aLocation.get(i) + "|"+ aPrice.get(i) + "|" + aRating.get(i);
                    
//                  JOptionPane.showMessageDialog(this, "Property Found" + "\n" + aPropertyName.get(i) + "|" +  aPropertyType.get(i) + "|"+  aLocation.get(i) + "|"+ aPrice.get(i) + "|" + aRating.get(i) );
                    btnClearActionPerformed(evt);
                    break;
                    
                }
                else{
                    result = "Property Not Found";
                    
                }
            }
            JOptionPane.showMessageDialog(this,result);
        }
        else{
            JOptionPane.showMessageDialog(this, "Please fill up the form properly" );
        }
        
    }//GEN-LAST:event_btnMainSearchActionPerformed

    private void radBhaktapurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radBhaktapurActionPerformed
        // TODO add your handling code here:
        searchValues[1] = "Bhaktapur";
    }//GEN-LAST:event_radBhaktapurActionPerformed

    private void radPokharaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radPokharaActionPerformed
        // TODO add your handling code here:

        searchValues[1] = "Pokhara";
    }//GEN-LAST:event_radPokharaActionPerformed

    private void cmbPropertyTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPropertyTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPropertyTypeActionPerformed

    public void tblSwap(int i, int min) {
        // swapping module code values
        String propertyNameTemp = (String) tblRooms.getValueAt(i, 0);
        tblRooms.setValueAt(tblRooms.getValueAt(min, 0), i, 0);
        tblRooms.setValueAt(propertyNameTemp, min, 0);

        // swapping module title values
        String propertyTypeTemp = (String) tblRooms.getValueAt(i, 1);
        tblRooms.setValueAt(tblRooms.getValueAt(min, 1), i, 1);
        tblRooms.setValueAt(propertyTypeTemp, min, 1);

        // swapping lecture room values
        String locationTemp = (String) tblRooms.getValueAt(i, 2);
        tblRooms.setValueAt(tblRooms.getValueAt(min, 2), i, 2);
        tblRooms.setValueAt(locationTemp, min, 2);

        String priceTemp = (String) tblRooms.getValueAt(i, 3);
        tblRooms.setValueAt(tblRooms.getValueAt(min, 3), i, 3);
        tblRooms.setValueAt(priceTemp, min, 3);

        String ratingTemp = (String) tblRooms.getValueAt(i, 4);
        tblRooms.setValueAt(tblRooms.getValueAt(min, 4), i, 4);
        tblRooms.setValueAt(ratingTemp, min, 4);
    }

    public ArrayList linearSearch(ArrayList<String> al, String val) {

        ArrayList<Integer> result = new ArrayList();
        for (int i = 0; i < al.size(); i++) {
            if (al.get(i).compareTo(val) == 0) {
                result.add(i);
            }
        }
        return result;

    }

    public String getPropertyName() {
        return txtPropertyName.getText();
    }

    public String getPropertyType() {
        return txtPropertyType.getText();
    }

    public String getPropertyLocation() {
        return txtLocation.getText();
    }

    public String getPrice() {
        return txtPrice.getText();
    }

    public String getRating() {
        return txtRating.getText();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CollegeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CollegeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CollegeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CollegeInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CollegeInfo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMainSearch;
    private javax.swing.JButton btnPriceSearch;
    private javax.swing.JButton btnPriceSort;
    private javax.swing.JButton btnRatingsSort;
    private javax.swing.JButton btnTypeSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cmbPropertyType;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPrice2;
    private javax.swing.JLabel lblPropertyName;
    private javax.swing.JLabel lblPropertyType;
    private javax.swing.JLabel lblPropertyType2;
    private javax.swing.JLabel lblRating;
    private javax.swing.JLabel lblRating2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JMenuBar mbrMenuBar;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniOpen;
    private javax.swing.JMenuItem mniUserManual;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenu mnuHelp;
    private javax.swing.JRadioButton radBhaktapur;
    private javax.swing.JRadioButton radKathmandu;
    private javax.swing.JRadioButton radPokhara;
    private javax.swing.JTable tblRooms;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtPrice2;
    private javax.swing.JTextField txtPropertyName;
    private javax.swing.JTextField txtPropertyType;
    private javax.swing.JTextField txtRating;
    private javax.swing.JTextField txtRating2;
    // End of variables declaration//GEN-END:variables
}
